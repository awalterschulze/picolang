//  Copyright 2015 Walter Schulze
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

/* Lexer Part */

_lineComment : '/' '/' {.} '\n' ;

_blockComment : '/' '*' {. | '*'} '*' '/' ;

_comment : _lineComment | _blockComment ;

_ws : ' ' | '\t' | '\n' | '\r' ; //whitespace

!space : _comment | _ws ;

_decimal_digit : '0' - '9' ;
_octal_digit : '0' - '7' ;
_hex_digit : '0' - '9' | 'A' - 'F' | 'a' - 'f';

_int_lit     : _decimal_lit | _octal_lit | _hex_lit ;
_decimal_lit : ( '1' - '9' ) { _decimal_digit } ;
_octal_lit   : '0' { _octal_digit } ;
_hex_lit     : '0' ( 'x' | 'X' ) _hex_digit { _hex_digit } ;

singed_int_lit : ['-'] _int_lit ;

_decimals  : _decimal_digit { _decimal_digit } ;
_exponent  : ( 'e' | 'E' ) [ '+' | '-' ] _decimals ;

float_lit : ( _decimals '.' _decimals _exponent )
			| ( _decimals '.' ( _decimals | _exponent ) )
          	| ( _decimals _exponent )
          	| ( '.' _decimals [ _exponent ] ) 
          	;

_upcase : 'A'-'Z' ;
_lowcase : 'a'-'z' ;
_id_char : _upcase | _lowcase | '_' | _decimal_digit ;

_id : (_upcase | _lowcase | '_' ) {_id_char} ;
id : _id ;

_qualid : _id { '.' _id } ;

_big_u_value      : '\\' 'U' _hex_digit _hex_digit _hex_digit _hex_digit
                            _hex_digit _hex_digit _hex_digit _hex_digit ;
_little_u_value   : '\\' 'u' _hex_digit _hex_digit _hex_digit _hex_digit ;
_hex_byte_u_value   : '\\' 'x' _hex_digit _hex_digit ;

_octal_byte_u_value : '\\' _octal_digit _octal_digit _octal_digit ;
_byte_value       : _octal_byte_u_value | _hex_byte_u_value ;
_raw_string : '`' {.} '`' ;
_escaped_char     : '\\' ( 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v' | '\\' | '\'' | '"' ) ;
_unicode_value    : . | _little_u_value | _big_u_value | _escaped_char ;
_interpreted_string : '"' { _unicode_value | _byte_value } '"' ;

string_lit : _raw_string | _interpreted_string ;

_char_lit	: '\'' (_unicode_value | _byte_value) '\'' ;

byte_elem : _int_lit | _char_lit ;

/* Syntax Part */

<< 
import (
	"github.com/awalterschulze/picolang/lang/ast"
)
>>

Statements
	: Statements Statement  << append($0.([]ast.Statement), $1.(ast.Statement)), nil >>
	| Statement             << []ast.Statement{$0.(ast.Statement)}, nil >>
	;

Statement
 	: Let
 	| Import
 	| Println
 	| Expr
 	;

Let : "let" id "=" Expr << &ast.Let{ast.ToString($1), $3.(*ast.Expr)}, nil >>
	;

Import
	: "import" id string_lit  << &ast.Import{ast.ToString($1), ast.ToString($2)}, nil >>
	;

Println : "println(" Expr ")" << &ast.Println{$1.(*ast.Expr)}, nil >>
	;

Expr
	: id "(" ")"           << &ast.Expr{ast.ToString($0), []*ast.Param{}, nil}, nil >>
	| id                   << &ast.Expr{ast.ToString($0), nil, nil}, nil >>
	| id "(" Params ")"    << &ast.Expr{ast.ToString($0), $2.([]*ast.Param), nil}, nil >>
	;

Params
	: Params "," Param     << append($0.([]*ast.Param), $2.(*ast.Param)), nil >>
	| Param                << []*ast.Param{$0.(*ast.Param)}, nil >>
	;

Param
	: id                  << &ast.Param{Id: ast.ToStringPtr($0)}, nil >>
	| string_lit          << &ast.Param{Str: ast.ToStringPtr($0)}, nil >>
	| float_lit           << &ast.Param{Float: ast.ToFloat64($0)}, nil >>
	| singed_int_lit      << &ast.Param{Float: ast.ToFloat64($0)}, nil >>
	| "{" Params "}"      << &ast.Param{List: $1.([]*ast.Param)}, nil >>
	;
